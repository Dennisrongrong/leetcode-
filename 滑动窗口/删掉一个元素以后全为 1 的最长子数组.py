# -*- coding: utf-8 -*-
"""
@Time ： 2023/11/5 11:09
@Auth ： 归去来兮
@File ：删掉一个元素以后全为 1 的最长子数组.py
@IDE ：PyCharm
@Motto:花中自幼微风起
"""
"""
给你一个二进制数组 nums ，你需要从中删掉一个元素。
请你在删掉元素的结果数组中，返回最长的且只包含 1 的非空子数组的长度。
如果不存在这样的子数组，请返回 0 。

提示 1：
输入：nums = [1,1,0,1]
输出：3
解释：删掉位置 2 的数后，[1,1,1] 包含 3 个 1 。
示例 2：
输入：nums = [0,1,1,1,0,1,1,0,1]
输出：5
解释：删掉位置 4 的数字后，[0,1,1,1,1,1,0,1] 的最长全 1 子数组为 [1,1,1,1,1] 。
示例 3：
输入：nums = [1,1,1]
输出：2
解释：你必须要删除一个元素。

基本思路：题目要求在删掉元素的结果数组中，返回最长的且只包含 1 的非空子数组的长度 根据题意转换为在原数组 nums 中，
返回一个最长的且只包含一个 0 的非空子数组的长度。因此，可以使用滑动窗口方法，滑动窗口的限制条件是：窗口内最多只有 1 个 0。
使用 left 和 right 两个指针，分别指向滑动窗口的左右边界 right 主动右移，当 nums[right] 为 0，
说明滑动窗口内增加了一个 0 判断此时窗口内 0 的个数，如果超过了 1，则 left 指针被迫右移，直至窗口内的 0 的个数小于等于 1 为止
"""
nums = [0,1,1,1,0,1,1,0,1]
n = len(nums)
res = 0
left, right = 0, 0
cnt_zeros = 0

while right < n:
    if nums[right] == 0:
        cnt_zeros += 1
    while cnt_zeros > 1:
        if nums[left] == 0:
            cnt_zeros -= 1
        left += 1
    res = max(res, right - left)
    right += 1
print(res)